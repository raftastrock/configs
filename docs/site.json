{"title":"Notes","githubRepo":"https://github.com/protoEvangelion/notes","index":{"title":"Home","description":"Something nice and for sure about the project. Make it short and sweet.","content":" Copyright © 2017 Liferay, Inc Powered by WeDeploy™ ","srcFilePath":"src/pages/index.soy","id":"pages","url":"/./","children":{"blog":{"title":"Blog","description":"Discover all the latest about our project.","type":"blog","content":" ","srcFilePath":"src/pages/blog/index.soy","id":"blog","url":"/blog/","children":{"markdown-post":{"title":"Markdown Post","description":"Lorem ipsum dolor sit amet, consectetur adipisicing elit.","date":"February 02, 2017","author":"Author Name","layout":"blog","content":" {$page.description} Strong dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas nulla pariatur? At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus id quod maxime placeat facere possimus, omnis voluptas assumenda est, omnis dolor repellendus. Temporibus autem quibusdam et aut officiis debitis aut rerum necessitatibus saepe eveniet ut et voluptates repudiandae sint et molestiae non recusandae. Itaque earum rerum hic tenetur a sapiente delectus, ut aut reiciendis voluptatibus maiores alias consequatur aut perferendis doloribus asperiores repellat. ","srcFilePath":"src/pages/blog/markdown-post.md","id":"markdown-post","url":"/blog/markdown-post.html"},"soy-post":{"title":"Soy Post","description":"Voluptas laboriosam qui dolor et cumque tempore.","date":"January 12, 2017","author":"Author Name","content":" Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas nulla pariatur? At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus id quod maxime placeat facere possimus, omnis voluptas assumenda est, omnis dolor repellendus. Temporibus autem quibusdam et aut officiis debitis aut rerum necessitatibus saepe eveniet ut et voluptates repudiandae sint et molestiae non recusandae. Itaque earum rerum hic tenetur a sapiente delectus, ut aut reiciendis voluptatibus maiores alias consequatur aut perferendis doloribus asperiores repellat. ","srcFilePath":"src/pages/blog/soy-post.soy","id":"soy-post","url":"/blog/soy-post.html"}},"childIds":["markdown-post","soy-post"],"redirect":"/blog/markdown-post.html"},"docs":{"title":"Docs","description":"Everything you need to know to get started.","content":" Docs Start learning how to leverage the power of . Choose a Guide Each one provide step by step coverage for every core feature. ","srcFilePath":"src/pages/docs/index.soy","id":"docs","url":"/docs/","children":{"search":{"title":"Search","description":"Find what you're looking for in the documentation.","hidden":true,"content":" Electric Docs Start learning how to leverage the power of . ","srcFilePath":"src/pages/docs/search.soy","id":"search","url":"/docs/search.html"},"Algos":{"title":"Algos","description":"Fundamentals: algorithms, computing, 1's & 0's","layout":"guide","icon":"hammer","weight":1,"content":" {$page.description} Big O Notation Big O Cheatsheet TODO: Read this Big O sucks away the unimportant stuff so you can focus on what matters O(1) When you have no loops and are just doing something and exiting/returning O(n) When you are doing the same amount of work that is going into a function O(n^2) Trick here is to look for double for or while loops O(log n) Where code employs divide and conquer strategies that use recursion like merge and quick sorts Iteration Bubble Sort bigO = n ^ 2 function bubbleSort(nums) { do { var swapped = false for (let i = 0; i < nums.length; i++) { if (nums[i] nums[i + 1] { const temp = nums[i] nums[i] = nums[i + 1] nums[i + 1] = temp swapped = true } } } while(swapped) } You probably will never use a do loop or bubble sort in production code Insertion Sort bigO = n ^ 2 Has more favorable coefficients than bubble sort function insertionSort(nums) { for (let i = 1; i < nums.length; i++) { for (let j = 0; j < i; j++) { if (nums[i] < nums[j]) { const spliced = nums.splice(i, 1) nums.splice(j, 0, spliced[0]) } } } } Recursion Your base case is the most important piece. If you don't write this first you will stack overflow function basicRecursion(max, current) { if (current max) return console.log(current) basicRecursion(max, current + 1) } basicRecursion(1, 10) Fibonacci Sequences 1, 1, 2, 3, 5, 10 Fibonacci sequences lends itself well to recursion because they are themselves defined recursively You need to know the first two preceeding terms to get the nth number of the sequence function fibonacci(n) { if (n ","srcFilePath":"src/pages/docs/Algos/index.md","id":"Algos","url":"/docs/Algos/"},"JavaScript":{"title":"JavaScript","description":"When you strive to comprehend your code, you create better work and become better at what you do. The code isn’t just your job anymore, it’s your craft. ~Jenn Lukas","layout":"guide","icon":"flash","weight":2,"content":" {$page.description} I am not content, nor should you be, at stopping once something just works, and not really knowing why. I gently challenge you to journey down that bumpy \"road less traveled\" and embrace all that JavaScript is and can do. With that knowledge, no technique, no framework, no popular buzzword acronym of the week, will be beyond your understanding. ~Kyle Simpson ","srcFilePath":"src/pages/docs/JavaScript/index.md","id":"JavaScript","url":"/docs/JavaScript/","children":{"pro-tips":{"title":"Pro Tips","description":"Golden nuggets on JS from the masters","layout":"guide","weight":2,"content":" {$page.description} Master Tips Always, always, always favor readability. If it is a bottleneck to perf come back and fix it later Stability is something you want to keep in mind when picking an algo Algos are all about tradeoffs Pro Tip If you cannot see the variable on the same page, \"redeclare it\" so the reader knows exactly what scope it belongs to ","srcFilePath":"src/pages/docs/JavaScript/pro-tips.md","id":"pro-tips","url":"/docs/JavaScript/pro-tips.html"},"scoping":{"title":"Scoping","description":"Super important concept about what level declared variables can be accessed","layout":"guide","weight":1,"content":" {$page.description} Block Scope Block scopes have curly braces Kyle Simpson recommends using var most of the time, then let, then const He doesn't use const to declare functions only uses const for immutable objects const implies a constant means it never is reassigned the problem of using const is that it confuses readers because a lot of people still think that a \"constant\" doesn't change function diff(x,y) { if (x y) { let tmp = x x = y y = tmp } return y - x } Let is blocked scoped to if If you try to access tmp outside of the if block you will get a reference error let is always better used in a for loop let cannot be redeclared but var can be redeclared function repeat(fn, n) { var result; for (let i = 0; i < n; i ++) { result = fn( result, i) } return result } var is better used when you want to stylistically signal to the reader that result in this case is going to be used throughout the function function lookupRecord(searchStr) { try { var id = getRecord(searchStr) } catch (err) { var id = -1 } return id } By using var here you escape the block scope and can reference the variable Function Scoping var foo = 'foo' function bob(0 { var foo = 'foo2' console.log(foo) // 'foo2' }) bob() console.log(foo) // 'foo' phew! IIFE (immediately invoked function expression) Pattern If you don't want to pollute the name space, but you want to create scope and you only want your function to run once, the IIFE pattern is helpful This is similar to block scoping var foo = 'foo' (function IIFE(bar) { var foo = 'foo2' console.log(foo) // 'foo2' })(foo) console.log(foo) // 'foo' ","srcFilePath":"src/pages/docs/JavaScript/scoping.md","id":"scoping","url":"/docs/JavaScript/scoping.html"}},"childIds":["scoping","pro-tips"]},"Liferay":{"title":"Liferay","description":"General liferay things.","layout":"guide","icon":"code-file","weight":3,"content":" {$page.description} Integrating Metal in the Liferay context It is recommended to integrate metal at the OSGI level although you could do it from a theme level and potentially a web content level In relation to that keep an eye on page fragments that Jorge Ferrer is working on which may facilitate this Loop Faro are good examples for microsites Metal is only really helpful when you have dynamic content For static content it is not useful Soy is only possibly on server side; better for SEO At this point it is not ideal to render JSX on Java server or have like Node servlets rendering and passing it on to Java Talk to Travis about workspaces Use generator cli rather than building things out in Liferay context ","srcFilePath":"src/pages/docs/Liferay/index.md","id":"Liferay","url":"/docs/Liferay/"},"Linux":{"children":{"actions":{"title":"Actions","description":"Cool actions you can do in linux","layout":"guide","weight":1,"content":" {$page.description} Adding GitHub name and email in the global config git config --global user.name \"John Doe\" git config --global user.email johndoe@example.com Change Default Terminal sudo chsh -s $(which zsh) How to install a .deb file sudo dpkg -i /path/to/deb/file Change Having to type password on Sudo command Open terminal window and type: sudo visudo In the bottom of the file, type the follow: username ALL=(ALL) NOPASSWD: ALL Permissions Permissions are granted with: chmod a+x filename If you run a ls -l in the cli you will get a list of files and folders with a string at the front like so: -rw-rw-r-- The first space will be blank for a file but d if it is a directory The next three spaces represent permissions for current user The next three groups The next three all users x = executable w = writable r = readable So when running a+x you are saying to make file executable for all users How to Remap Keys in Ubuntu This approach relies upon a program to listen for keys events and then dispatching the key combo you want using a virtual keybard sudo apt install xvkbd This is the virtual keyboard sudo apt install xbindkeys This is the listener sudo apt install xbindkeys-config This is the listener gui The data goes into your .xbindkeysrc file in your home dir Here is an example: Select Left \"xvkbd -xsendevent -text \"\\C\\S\\[Left]\"\" Control+Shift+Mod2+Mod5 + j Select Right \"xvkbd -xsendevent -text \"\\C\\S\\[Right]\"\" Control+Shift+Mod2+Mod5 + l The above simply listens for the meta key + control + shift and sends a select left and select right text command with the virtual keyboard After modifying your .xbindkeysrc file you must kill the xbindkeys process with pkill -9 xbindkeys and then rerun it with xbindkeys If you want to verify it is running you can do pgrep xbindkeys which will output the pid How to unzip a tar file tar -zxvf file How to unzip a gz file gunzip file.gz file ","srcFilePath":"src/pages/docs/Linux/actions.md","id":"actions","url":"/docs/Linux/actions.html"}},"title":"Linux","description":"Intro to Linux","layout":"guide","icon":"cloud","weight":4,"content":" {$page.description} History Linux, Mac, and Android are based on ideas and specs of UNIX Started as an os at AT&T in the 60s Unix was originally built for large mainframe computers that people would use at the same time Every program on UNIX system read input from standard input devide (stdin) and write to standard output (stdout) The big idea is that rather than type everything yourself, you can have the computer type for you There were terminals and you ran your commands which \"printed out\" your stuff to an actual printer Shell UNIX still matters because it is still portable to many kinds of hardware Introduction to Bash, VIM & Regex wifi routers dsl and cable modems raspberry pi, beaglebone, nvidia, jetson android phones linux laptop or desktop Mac OSX computer Web server Philosophy A set of principles of how programs should relate to each other each program should do one thing well the output of a program can be the input of another ","srcFilePath":"src/pages/docs/Linux/index.md","id":"Linux","url":"/docs/Linux/","childIds":["actions"]}},"childIds":["Algos","JavaScript","Liferay","Linux","search"]},"updates":{"title":"Updates","description":"Check out what's new","updates":[{"version":"1.0.0","major":true,"features":[{"icon":"hammer","title":"Awesome bugfixes","description":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur nulla libero, eleifend in euismod eget, fringilla id diam. Proin quis interdum ipsum.","url":"/"},{"icon":"hammer","title":"Awesome enhancements","description":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur nulla libero, eleifend in euismod eget, fringilla id diam. Proin quis interdum ipsum.","url":"/"}]},{"version":"2.0.4","major":false,"features":[{"icon":"hammer","title":"Awesome bugfixes","description":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur nulla libero, eleifend in euismod eget, fringilla id diam. Proin quis interdum ipsum.","url":"/"},{"icon":"hammer","title":"Awesome enhancements","description":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur nulla libero, eleifend in euismod eget, fringilla id diam. Proin quis interdum ipsum.","url":"/"},{"icon":"hammer","title":"Awesome enhancements","description":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur nulla libero, eleifend in euismod eget, fringilla id diam. Proin quis interdum ipsum.","url":"/"}]}],"content":" ","srcFilePath":"src/pages/updates/index.soy","id":"updates","url":"/updates/"}},"childIds":["blog","docs","updates"]}}